{"version":3,"sources":["Header.js","Note.js","NotesList.js","App.js","index.js"],"names":["Header","props","react_default","a","createElement","className","onClick","addNote","type","placeholder","value","searchText","onChange","e","onSearch","target","Note","note","title","updatedValue","editMeId","id","onType","description","deleteNote","NotesList","noteElements","notes","filter","doesMatchSearch","map","src_Note","key","App","state","Date","now","newNotes","concat","Object","toConsumableArray","_this","setState","updatedKey","updatedNotes","text","newSearchText","toLowerCase","titleMatch","includes","descriptionMatch","hasMatch","noteId","savedNotesString","JSON","stringify","this","localStorage","setItem","getItem","savedNotes","parse","src_Header","src_NotesList","Component","rootElement","document","getElementById","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.b70de5f6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = (props) => {\r\n  const callSearch = (e) => {\r\n    props.onSearch(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <header>\r\n      <h1 className=\"app-header__title\">Super Sticky Notes</h1>\r\n      <aside className=\"app-header__controls\">\r\n        <button className=\"add-new\" onClick={props.addNote}>\r\n          + New Note\r\n        </button>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type here to search...\"\r\n          className=\"search\"\r\n          value={props.searchText}\r\n          onChange={callSearch}\r\n        />\r\n      </aside>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\n/* This presentational component renders a single\r\nlist item element with two text input fields,\r\none for the note's title and one for the note's\r\ndescription. When the user types in these fields,\r\nfunctions that are passed to this component\r\nas props are used to update the state of the\r\ncorresponding note object in the state of the\r\nApp component  */\r\n\r\nconst Note = (props) => {\r\n  const updateTitle = (e) => {\r\n    const updatedValue = e.target.value;\r\n    const editMeId = props.note.id;\r\n    props.onType(editMeId, \"title\", updatedValue);\r\n  };\r\n\r\n  const updateDescription = (e) => {\r\n    const updatedValue = e.target.value;\r\n    const editMeId = props.note.id;\r\n    props.onType(editMeId, \"description\", updatedValue);\r\n  };\r\n\r\n  const deleteById = () => props.deleteNote(props.note.id);\r\n\r\n  return (\r\n    <li className=\"note\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Title\"\r\n        className=\"note__title\"\r\n        value={props.note.title}\r\n        onChange={updateTitle}\r\n      />\r\n      <textarea\r\n        placeholder=\"Description...\"\r\n        className=\"note__description\"\r\n        value={props.note.description}\r\n        onChange={updateDescription}\r\n      />\r\n      <span className=\"note__delete\" onClick={deleteById}>\r\n        X\r\n      </span>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import React from \"react\";\r\nimport Note from \"./Note.js\";\r\n\r\nconst NotesList = (props) => {\r\n  /* For every single note object it returns\r\n  the note object only if the doesMatchSearch\r\n  is true, can write this w/out === true */\r\n  const keepSearchMatches = (note) => note.doesMatchSearch === true;\r\n  /* For every single note object that is\r\n  true we filter it out aka keep it */\r\n  const searchMatches = props.notes.filter(keepSearchMatches);\r\n  const renderNote = (note) => (\r\n    <Note\r\n      note={note}\r\n      key={note.id}\r\n      onType={props.onType}\r\n      deleteNote={props.deleteNote}\r\n    />\r\n  );\r\n  /* Then map over only the true note objects\r\n  instead of all of the note objects */\r\n  const noteElements = searchMatches.map(renderNote);\r\n  return <ul className=\"notes-list\">{noteElements}</ul>;\r\n};\r\n\r\nexport default NotesList;\r\n","import React, { Component } from \"react\";\nimport Header from \"./Header.js\";\nimport NotesList from \"./NotesList.js\";\n\nclass App extends Component {\n  state = {\n    notes: [\n      {\n        id: Date.now(),\n        title: \"\",\n        description: \"\",\n        doesMatchSearch: true\n      }\n    ],\n    searchText: \"\"\n  };\n\n  addNote = () => {\n    const newNote = {\n      id: Date.now(),\n      title: \"\",\n      description: \"\",\n      doesMatchSearch: true\n    };\n    const newNotes = [newNote, ...this.state.notes];\n    this.setState({\n      notes: newNotes\n    });\n  };\n\n  onType = (editMeId, updatedKey, updatedValue) => {\n    // editMeId == id of the note that is edited\n    // updatedKey == title or description field\n    // updatedValue == value of title or description\n    const updatedNotes = this.state.notes.map((note) => {\n      if (note.id !== editMeId) {\n        return note;\n      } else {\n        if (updatedKey === \"title\") {\n          note.title = updatedValue;\n          return note;\n        } else {\n          note.description = updatedValue;\n          return note;\n        }\n      }\n    });\n    this.setState({ notes: updatedNotes });\n  };\n\n  onSearch = (text) => {\n    /* toggle the doesMatchSearch boolean value of each sticky\n    note when the user types in the search field.\n    set the doesMatchSearch value to true for a sticky note if\n    it's title or description matches the search string. */\n    const newSearchText = text.toLowerCase();\n    const updatedNotes = this.state.notes.map((note) => {\n      if (!newSearchText) {\n        /* If the search field is empty, then\n      we set the doesMatchSearch value for every note to true. */\n        note.doesMatchSearch = true;\n        return note;\n      } else {\n        const title = note.title.toLowerCase();\n        const description = note.description.toLowerCase();\n        const titleMatch = title.includes(newSearchText);\n        const descriptionMatch = description.includes(newSearchText);\n        const hasMatch = titleMatch || descriptionMatch;\n        note.doesMatchSearch = hasMatch;\n        return note;\n      }\n    });\n    this.setState({ searchText: newSearchText, notes: updatedNotes });\n  };\n\n  deleteNote = (noteId) => {\n    /* remove note by id of note that the user clicked on */\n    const notIdMatch = (note) => note.id !== noteId;\n    const updatedNotes = this.state.notes.filter(notIdMatch);\n    this.setState({ notes: updatedNotes });\n  };\n\n  componentDidUpdate() {\n    /* after each render, save notes data to local storage */\n    const savedNotesString = JSON.stringify(this.state.notes);\n    localStorage.setItem(\"savedNotes\", savedNotesString);\n  }\n\n  componentDidMount() {\n    /* after rendering for the first time, read saved\n    notes data from local storage and pass that data\n    to component state if it exists */\n    const savedNotesString = localStorage.getItem(\"savedNotes\");\n    if (savedNotesString) {\n      const savedNotes = JSON.parse(savedNotesString);\n      this.setState({ notes: savedNotes });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Header\n          searchText={this.state.searchText}\n          addNote={this.addNote}\n          onSearch={this.onSearch}\n        />\n        <NotesList\n          notes={this.state.notes}\n          onType={this.onType}\n          deleteNote={this.deleteNote}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\nimport \"./index.css\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}